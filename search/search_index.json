{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Curso de Lenguaje C Num\u00e9rico Curso de introducci\u00f3n al lenguaje C orientado a los m\u00e9todos y la simulaci\u00f3n num\u00e9rica. Este curso pretende ofrecer de forma simple y clara una introducci\u00f3n r\u00e1pida a la programaci\u00f3n con el lenguaje C . El objetivo es no es presentar una referencia exhaustiva este lenguaje, sino ofrecer la informaci\u00f3n imprescindible para una persona que se inicia en ester lenguaje para su uso en matem\u00e1ticas y, concretamente, para la implementaci\u00f3n de algoritmos relacionados con el c\u00e1lculo y los m\u00e9todos num\u00e9ricos . Se presentan numerosos ejemplos que ilustran conceptos relacionados con esta tem\u00e1tica, acompa\u00f1ados con los conocimientos te\u00f3ricos m\u00ednimos para comprenderlos. \u00bfPara qui\u00e9n es este libro? Este libro est\u00e1 dirigido a toda persona que desee obtener unos conocimientos b\u00e1sicos en programaci\u00f3n en lenguaje C para algoritmos/asignaturas relacionados con las matem\u00e1ticas, en especial con los m\u00e9todos num\u00e9ricos y la simulaci\u00f3n num\u00e9rica. Aunque no sea el lenguaje m\u00e1s usado en m\u00e9todos num\u00e9ricos, unos conocimientos b\u00e1sicos de ese lenguaje pueden ser fundamentales para desarrolladores de software num\u00e9rico. \u00bfC\u00f3mo puedo utilizar este material? Puedes... acceder al curso a trav\u00e9s de internet o bien descargarlo de este repositorio git . En el \u00faltimo caso (si te interesa acceder al contenido del repositorio) podr\u00e1s visualizar los ficheros de tipo Markdown situados en el directorio docs utilizando MkDocs o cualquier visor de Markdown . \u00bfQu\u00e9 es el lenguaje C? El lenguaje de programaci\u00f3n C fue creado por Dennis Ritchie entre 1969 y 1973 cuando trabajaba en Bell Laboratories de AT&T junto con Ken Thompson en el dise\u00f1o del sistema operativo UNIX. C fue creado para poder escribir dicho sistema operativo en un lenguaje de alto nivel, independiente del hardware donde se ejecutara. Contar con un lenguaje de alto nivel permiti\u00f3 el avance de los sistemas operativos, ya que el mismo c\u00f3digo pod\u00eda ser utilizado en las distintas plataformas, propiciando la reutilizaci\u00f3n de c\u00f3digo y reduciendo los tiempos de desarrollo. As\u00ed es que los sistemas operativos basados en UNIX, el sistema BSD, el sistema GNU/Linux y muchos otros fueron desarrollados en C. Con el paso del tiempo, C se ha convertido en el lenguaje m\u00e1s trascendente de la historia de la inform\u00e1tica. Se han desarrollado cientos de bibliotecas que permiten a los programadores de C utilizar el c\u00f3digo desarrollado por otros para la realizaci\u00f3n de tareas comunes. Esto, a su vez, ha propiciado el desarrollo de infinidad de aplicaciones y herramientas en lenguaje C. Caracter\u00edsticas del lenguaje C C es un lenguaje de medio o relativamente bajo nivel , es decir, el c\u00f3digo es relativamente cercano al lenguaje m\u00e1quina con respecto al lenguaje humano o lenguajes de alto nivel . Es un lenguaje compilado , es decir requiere de un compilador (traductor que genera c\u00f3digo de m\u00e1quina a partir del c\u00f3digo fuente ). El programa ya compilado puede ejecutarse directamente en la m\u00e1quina. Estas caracter\u00edsticas hacen que el c\u00f3digo resultante de la programaci\u00f3n en lenguaje C sea mucho m\u00e1s r\u00e1pido que otros lenguajes de mayor nivel como Python o Matlab / Octave : lenguajes usados con frecuencia en c\u00e1lculo num\u00e9rico, pero que son de tipo interpretado , no compilado. Por contra, el tiempo requerido para programar algoritmos en lenguaje C es usualmente mayor que en lenguajes de alto nivel como Python o Matlab/Octave. Acerca de Se otorga permiso para copiar y reutilizar este material bajo los t\u00e9rminos de las licencias libre GFDL o Creative Commons Compartir-Igual 3.0 . V\u00e9ase el fichero about.md","title":"Introducci\u00f3n"},{"location":"#curso-de-lenguaje-c-numerico","text":"Curso de introducci\u00f3n al lenguaje C orientado a los m\u00e9todos y la simulaci\u00f3n num\u00e9rica. Este curso pretende ofrecer de forma simple y clara una introducci\u00f3n r\u00e1pida a la programaci\u00f3n con el lenguaje C . El objetivo es no es presentar una referencia exhaustiva este lenguaje, sino ofrecer la informaci\u00f3n imprescindible para una persona que se inicia en ester lenguaje para su uso en matem\u00e1ticas y, concretamente, para la implementaci\u00f3n de algoritmos relacionados con el c\u00e1lculo y los m\u00e9todos num\u00e9ricos . Se presentan numerosos ejemplos que ilustran conceptos relacionados con esta tem\u00e1tica, acompa\u00f1ados con los conocimientos te\u00f3ricos m\u00ednimos para comprenderlos.","title":"Curso de Lenguaje C Num\u00e9rico"},{"location":"#para-quien-es-este-libro","text":"Este libro est\u00e1 dirigido a toda persona que desee obtener unos conocimientos b\u00e1sicos en programaci\u00f3n en lenguaje C para algoritmos/asignaturas relacionados con las matem\u00e1ticas, en especial con los m\u00e9todos num\u00e9ricos y la simulaci\u00f3n num\u00e9rica. Aunque no sea el lenguaje m\u00e1s usado en m\u00e9todos num\u00e9ricos, unos conocimientos b\u00e1sicos de ese lenguaje pueden ser fundamentales para desarrolladores de software num\u00e9rico.","title":"\u00bfPara qui\u00e9n es este libro?"},{"location":"#como-puedo-utilizar-este-material","text":"Puedes... acceder al curso a trav\u00e9s de internet o bien descargarlo de este repositorio git . En el \u00faltimo caso (si te interesa acceder al contenido del repositorio) podr\u00e1s visualizar los ficheros de tipo Markdown situados en el directorio docs utilizando MkDocs o cualquier visor de Markdown .","title":"\u00bfC\u00f3mo puedo utilizar este material?"},{"location":"#que-es-el-lenguaje-c","text":"El lenguaje de programaci\u00f3n C fue creado por Dennis Ritchie entre 1969 y 1973 cuando trabajaba en Bell Laboratories de AT&T junto con Ken Thompson en el dise\u00f1o del sistema operativo UNIX. C fue creado para poder escribir dicho sistema operativo en un lenguaje de alto nivel, independiente del hardware donde se ejecutara. Contar con un lenguaje de alto nivel permiti\u00f3 el avance de los sistemas operativos, ya que el mismo c\u00f3digo pod\u00eda ser utilizado en las distintas plataformas, propiciando la reutilizaci\u00f3n de c\u00f3digo y reduciendo los tiempos de desarrollo. As\u00ed es que los sistemas operativos basados en UNIX, el sistema BSD, el sistema GNU/Linux y muchos otros fueron desarrollados en C. Con el paso del tiempo, C se ha convertido en el lenguaje m\u00e1s trascendente de la historia de la inform\u00e1tica. Se han desarrollado cientos de bibliotecas que permiten a los programadores de C utilizar el c\u00f3digo desarrollado por otros para la realizaci\u00f3n de tareas comunes. Esto, a su vez, ha propiciado el desarrollo de infinidad de aplicaciones y herramientas en lenguaje C.","title":"\u00bfQu\u00e9 es el lenguaje C?"},{"location":"#caracteristicas-del-lenguaje-c","text":"C es un lenguaje de medio o relativamente bajo nivel , es decir, el c\u00f3digo es relativamente cercano al lenguaje m\u00e1quina con respecto al lenguaje humano o lenguajes de alto nivel . Es un lenguaje compilado , es decir requiere de un compilador (traductor que genera c\u00f3digo de m\u00e1quina a partir del c\u00f3digo fuente ). El programa ya compilado puede ejecutarse directamente en la m\u00e1quina. Estas caracter\u00edsticas hacen que el c\u00f3digo resultante de la programaci\u00f3n en lenguaje C sea mucho m\u00e1s r\u00e1pido que otros lenguajes de mayor nivel como Python o Matlab / Octave : lenguajes usados con frecuencia en c\u00e1lculo num\u00e9rico, pero que son de tipo interpretado , no compilado. Por contra, el tiempo requerido para programar algoritmos en lenguaje C es usualmente mayor que en lenguajes de alto nivel como Python o Matlab/Octave.","title":"Caracter\u00edsticas del lenguaje C"},{"location":"#acerca-de","text":"Se otorga permiso para copiar y reutilizar este material bajo los t\u00e9rminos de las licencias libre GFDL o Creative Commons Compartir-Igual 3.0 . V\u00e9ase el fichero about.md","title":"Acerca de"},{"location":"about/","text":"Licencia y autores Copyright \u00a9 J. Rafael Rodr\u00edguez Galv\u00e1n Parte del material aqu\u00ed recogido se basa en los wikilibros : - \u00ab Programaci\u00f3n en C \u00bb - \u00ab \u00bb - Todos ellos son publicados por sus autores bajo los t\u00e9rminos de la Licencia GFDL o de la licencia Creative Commons Compartir-Igual 3.0 .","title":"Acerca de"},{"location":"about/#licencia-y-autores","text":"Copyright \u00a9 J. Rafael Rodr\u00edguez Galv\u00e1n Parte del material aqu\u00ed recogido se basa en los wikilibros : - \u00ab Programaci\u00f3n en C \u00bb - \u00ab \u00bb - Todos ellos son publicados por sus autores bajo los t\u00e9rminos de la Licencia GFDL o de la licencia Creative Commons Compartir-Igual 3.0 .","title":"Licencia y autores"},{"location":"fundamentos/","text":"Fundamentos de programaci\u00f3n El objetivo de esta secci\u00f3n es simplemente \u00bfQu\u00e9 es un algoritmo? Sin entrar en una definici\u00f3n m\u00e1s precisa, entenderemos por algoritmo a un conjunto de pasos, instrucciones o acciones l\u00f3gicas que se deben seguir para resolver un problema, de forma que: Cada uno de estos pasos est\u00e1 definido sin ambig\u00fcedad El algoritmo termina un tiempo finito despu\u00e9s de ejecutar todos los pasos. Caracter\u00edsticas : Un algoritmo tene que ser preciso. Tiene que estar bien definido. Tiene que ser finito. Es es independiente del lenguaje de ordenador o la m\u00e1quina donde se implemente. Un programa es una secuencia de instrucciones escritas en un lenguaje determinado para realizar o implementar uno o m\u00e1s algoritmos en el ordenador. Lenguajes de ordenador El lenguaje de m\u00e1quina es el \u00fanico lenguaje que la computadora \"entiende\" y es capaz de ejecutar. Los lenguajes de programaci\u00f3n son el medio de comunicaci\u00f3n entre el programador y una computadora. El programador escribe en alg\u00fan lenguaje de programaci\u00f3n y utiliza las herramientas provistas por ese lenguaje para transformarlo en lenguaje de m\u00e1quina. Tipos de lenguajes Existe una gran cantidad de lenguajes de programaci\u00f3n, que est\u00e1n pensados para distintas finalidades, siguen distintos paradigmas , y de una u otra forma se diferencian de los dem\u00e1s. Esquemas de programaci\u00f3n El esquema de programaci\u00f3n llamado Programaci\u00f3n Imperativa , consiste en escribir una secuencia de instrucciones una detr\u00e1s de la otra, que se ejecutar\u00e1n en orden. Algunas de esas instrucciones pueden hacer que la m\u00e1quina pase a una instrucci\u00f3n que no sea la siguiente, tal vez porque se cumpla una condici\u00f3n que hayamos establecido. En los \u00faltimos a\u00f1os ha tomado fuerza otro paradigma de computaci\u00f3n, llamado Programaci\u00f3n Orientada a Objetos , en el cual se intentan modelar los sistemas creados como extensiones de la realidad mediante la definici\u00f3n de \"objetos\" que modelan entidades de la vida real y que interact\u00faan entre s\u00ed mediante \"mensajes\" llamadas m\u00e9todos. El lenguaje C es un lenguaje imperativo, no orientado a objetos. Alto o bajo nivel Por otro lado, los lenguajes de programaci\u00f3n se clasifican en niveles. Un lenguaje es de m\u00e1s bajo nivel cuanto m\u00e1s cercano est\u00e9 al c\u00f3digo de m\u00e1quina, y un lenguaje que es de m\u00e1s alto nivel cuanto m\u00e1s lejano est\u00e9 de la m\u00e1quina y m\u00e1s cercano al lenguaje humano. C es un lenguaje de alto nivel aunque tiene muchas caracter\u00edsticas de lenguaje de bajo nivel (como el uso que permite hacer de la memoria). Estas caracter\u00edsticas hacen que C sea un lenguaje muy potente, ya que permite optimizar al m\u00e1ximo los recursos de la m\u00e1quina. Por ende, esto tambi\u00e9n hace que la dificultad y que los errores que se puedan cometer programando aumenten. As\u00ed que a C se le considera de nivel medio. Lenguajes de m\u00e1s alto nivel que C son aquellos en los que el programador no necesita encargarse de manipular la memoria, como Java , C# , Python , Ruby , entre otros. Compilados o interpretados Otra forma de clasificar a los lenguajes de programaci\u00f3n que es seg\u00fan la forma en que se ejecutan sus \u00f3rdenes. Existen los lenguajes que son interpretados , cuyas \u00f3rdenes pasan a trav\u00e9s de un int\u00e9rprete que se encarga de ejecutarlas (a partir del c\u00f3digo fuente) en el mismo momento en que est\u00e1n siendo le\u00eddas. Algunos de los lenguajes interpretados son Python , Perl o Tcl , entre muchos otros. La contraparte de los lenguajes interpretados son los lenguajes compilados (como el mismo C) que se diferencian en que las \u00f3rdenes son transformadas a lenguaje de m\u00e1quina que se almacena en un archivo ejecutable. Ese archivo puede ejecutarse luego, sin recurrir al compilador. Los lenguajes compilados tienen la ventaja de la velocidad y la eficiencia, pero los interpretados tienen la ventaja de que, generalmente, son muy portables y de m\u00e1s alto nivel. Estructura de la memoria de un ordenador Parte de esta potencia de C viene de que permite acceder con mucha libertad a la memoria de la m\u00e1quina. Para entender un poco c\u00f3mo es posible, debemos entender c\u00f3mo se guardan los datos en la memoria. Imaginemos que la memoria tiene un mont\u00f3n de casillas, una enorme fila de casillas, cada una de las cuales contiene un d\u00edgito binario (bit) : 0101001010100001010101001010000100111010110010010101001011010110001101010110101010110111... Es exactamente as\u00ed, pero es m\u00e1s c\u00f3modo recordar que esos bits se encuentran agrupados de ocho en ocho, formando octetos (bytes) : 01010010 10100001 01010100 10100001 00111010 11001001 01010010 11010110 00110101 01101010 10110111 ... Cada octeto puede contener (2^8=256) combinaciones distintas de ceros y unos, es decir, cualquier n\u00famero entre 0 y 255: 82 161 84 161 58 201 82 214 181 106 183 ... Tambi\u00e9n podemos representar estos n\u00fameros en base hexadecimal: 0x52 0xA1 0x54 0xA1 0x3A 0xC9 0x52 0xD6 0x35 0x6A 0xB7 ... O considerarlos caracteres, mediante alguna codificaci\u00f3n : R \u00a1 T \u00a1 : \u00c9 R \u00d6 5 j \u00b7 ... Este es el tipo de dato m\u00e1s elemental que nos podemos encontrar en C: el caracter. Un caracter ocupa exactamente un byte (8 bits) de memoria, y puede contener un n\u00famero entre 0 y 255, o entre -128 y 127, dependiendo si queremos considerarlo como sin signo o con \u00e9l.","title":"Fundamentos"},{"location":"fundamentos/#fundamentos-de-programacion","text":"El objetivo de esta secci\u00f3n es simplemente","title":"Fundamentos de programaci\u00f3n"},{"location":"fundamentos/#que-es-un-algoritmo","text":"Sin entrar en una definici\u00f3n m\u00e1s precisa, entenderemos por algoritmo a un conjunto de pasos, instrucciones o acciones l\u00f3gicas que se deben seguir para resolver un problema, de forma que: Cada uno de estos pasos est\u00e1 definido sin ambig\u00fcedad El algoritmo termina un tiempo finito despu\u00e9s de ejecutar todos los pasos.","title":"\u00bfQu\u00e9 es un algoritmo?"},{"location":"fundamentos/#caracteristicas","text":"Un algoritmo tene que ser preciso. Tiene que estar bien definido. Tiene que ser finito. Es es independiente del lenguaje de ordenador o la m\u00e1quina donde se implemente. Un programa es una secuencia de instrucciones escritas en un lenguaje determinado para realizar o implementar uno o m\u00e1s algoritmos en el ordenador.","title":"Caracter\u00edsticas:"},{"location":"fundamentos/#lenguajes-de-ordenador","text":"El lenguaje de m\u00e1quina es el \u00fanico lenguaje que la computadora \"entiende\" y es capaz de ejecutar. Los lenguajes de programaci\u00f3n son el medio de comunicaci\u00f3n entre el programador y una computadora. El programador escribe en alg\u00fan lenguaje de programaci\u00f3n y utiliza las herramientas provistas por ese lenguaje para transformarlo en lenguaje de m\u00e1quina.","title":"Lenguajes de ordenador"},{"location":"fundamentos/#tipos-de-lenguajes","text":"Existe una gran cantidad de lenguajes de programaci\u00f3n, que est\u00e1n pensados para distintas finalidades, siguen distintos paradigmas , y de una u otra forma se diferencian de los dem\u00e1s.","title":"Tipos de lenguajes"},{"location":"fundamentos/#esquemas-de-programacion","text":"El esquema de programaci\u00f3n llamado Programaci\u00f3n Imperativa , consiste en escribir una secuencia de instrucciones una detr\u00e1s de la otra, que se ejecutar\u00e1n en orden. Algunas de esas instrucciones pueden hacer que la m\u00e1quina pase a una instrucci\u00f3n que no sea la siguiente, tal vez porque se cumpla una condici\u00f3n que hayamos establecido. En los \u00faltimos a\u00f1os ha tomado fuerza otro paradigma de computaci\u00f3n, llamado Programaci\u00f3n Orientada a Objetos , en el cual se intentan modelar los sistemas creados como extensiones de la realidad mediante la definici\u00f3n de \"objetos\" que modelan entidades de la vida real y que interact\u00faan entre s\u00ed mediante \"mensajes\" llamadas m\u00e9todos. El lenguaje C es un lenguaje imperativo, no orientado a objetos.","title":"Esquemas de programaci\u00f3n"},{"location":"fundamentos/#alto-o-bajo-nivel","text":"Por otro lado, los lenguajes de programaci\u00f3n se clasifican en niveles. Un lenguaje es de m\u00e1s bajo nivel cuanto m\u00e1s cercano est\u00e9 al c\u00f3digo de m\u00e1quina, y un lenguaje que es de m\u00e1s alto nivel cuanto m\u00e1s lejano est\u00e9 de la m\u00e1quina y m\u00e1s cercano al lenguaje humano. C es un lenguaje de alto nivel aunque tiene muchas caracter\u00edsticas de lenguaje de bajo nivel (como el uso que permite hacer de la memoria). Estas caracter\u00edsticas hacen que C sea un lenguaje muy potente, ya que permite optimizar al m\u00e1ximo los recursos de la m\u00e1quina. Por ende, esto tambi\u00e9n hace que la dificultad y que los errores que se puedan cometer programando aumenten. As\u00ed que a C se le considera de nivel medio. Lenguajes de m\u00e1s alto nivel que C son aquellos en los que el programador no necesita encargarse de manipular la memoria, como Java , C# , Python , Ruby , entre otros.","title":"Alto o bajo nivel"},{"location":"fundamentos/#compilados-o-interpretados","text":"Otra forma de clasificar a los lenguajes de programaci\u00f3n que es seg\u00fan la forma en que se ejecutan sus \u00f3rdenes. Existen los lenguajes que son interpretados , cuyas \u00f3rdenes pasan a trav\u00e9s de un int\u00e9rprete que se encarga de ejecutarlas (a partir del c\u00f3digo fuente) en el mismo momento en que est\u00e1n siendo le\u00eddas. Algunos de los lenguajes interpretados son Python , Perl o Tcl , entre muchos otros. La contraparte de los lenguajes interpretados son los lenguajes compilados (como el mismo C) que se diferencian en que las \u00f3rdenes son transformadas a lenguaje de m\u00e1quina que se almacena en un archivo ejecutable. Ese archivo puede ejecutarse luego, sin recurrir al compilador. Los lenguajes compilados tienen la ventaja de la velocidad y la eficiencia, pero los interpretados tienen la ventaja de que, generalmente, son muy portables y de m\u00e1s alto nivel.","title":"Compilados o interpretados"},{"location":"fundamentos/#estructura-de-la-memoria-de-un-ordenador","text":"Parte de esta potencia de C viene de que permite acceder con mucha libertad a la memoria de la m\u00e1quina. Para entender un poco c\u00f3mo es posible, debemos entender c\u00f3mo se guardan los datos en la memoria. Imaginemos que la memoria tiene un mont\u00f3n de casillas, una enorme fila de casillas, cada una de las cuales contiene un d\u00edgito binario (bit) : 0101001010100001010101001010000100111010110010010101001011010110001101010110101010110111... Es exactamente as\u00ed, pero es m\u00e1s c\u00f3modo recordar que esos bits se encuentran agrupados de ocho en ocho, formando octetos (bytes) : 01010010 10100001 01010100 10100001 00111010 11001001 01010010 11010110 00110101 01101010 10110111 ... Cada octeto puede contener (2^8=256) combinaciones distintas de ceros y unos, es decir, cualquier n\u00famero entre 0 y 255: 82 161 84 161 58 201 82 214 181 106 183 ... Tambi\u00e9n podemos representar estos n\u00fameros en base hexadecimal: 0x52 0xA1 0x54 0xA1 0x3A 0xC9 0x52 0xD6 0x35 0x6A 0xB7 ... O considerarlos caracteres, mediante alguna codificaci\u00f3n : R \u00a1 T \u00a1 : \u00c9 R \u00d6 5 j \u00b7 ... Este es el tipo de dato m\u00e1s elemental que nos podemos encontrar en C: el caracter. Un caracter ocupa exactamente un byte (8 bits) de memoria, y puede contener un n\u00famero entre 0 y 255, o entre -128 y 127, dependiendo si queremos considerarlo como sin signo o con \u00e9l.","title":"Estructura de la memoria de un ordenador"},{"location":"primeros_pasos/","text":"Primeros pasos En este cap\u00edtulo veremos un resumido listado de conceptos b\u00e1sicos, esta informaci\u00f3n puede encontrarse en forma m\u00e1s elaborada en el WikiLibro Fundamentos de programaci\u00f3n .","title":"Primeros pasos"},{"location":"primeros_pasos/#primeros-pasos","text":"En este cap\u00edtulo veremos un resumido listado de conceptos b\u00e1sicos, esta informaci\u00f3n puede encontrarse en forma m\u00e1s elaborada en el WikiLibro Fundamentos de programaci\u00f3n .","title":"Primeros pasos"}]}